/*=========================================================================
 *
 *  Copyright Insight Software Consortium
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0.txt
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 *=========================================================================*/
#ifndef itkWaveletDenoiseBLSGSM_h
#define itkWaveletDenoiseBLSGSM_h

#include <itkImageRegionConstIterator.h>
#include <itkImageRegionIterator.h>
#include <itkImageConstIterator.h>
#include <complex>
#include <itkFixedArray.h>
#include <itkImageToImageFilter.h>
#include <itkFrequencyShrinkImageFilter.h>
#include <itkFrequencyShrinkViaInverseFFTImageFilter.h>

namespace itk
{
/** \class WaveletDenoiseBLSGSM
 * Implement denoise method on wavelet coefficients based on the BLS-GSM method.
 *
 * It takes as input a set of wavelet coefficients generated by a Forward WaveletPyramid.
 * The output is the modified set of wavelet coefficients.
 *
 * Based on work by Portilla et al:
 * Image Denoising using Scale Mixtures of Gaussians in the Wavelet Domain.
 * Javier Portilla, Vasily Strela, Martin J. Wainwright and Eero P. Simoncelli.
 * IEEE Transactions on Image Processing, vol. 12, no. 11 pp. 1338-1351, November 2003
 *
 * \ingroup IsotropicWavelets
 */
template< typename TImage>
class WaveletDenoiseBLSGSM:
  public ImageToImageFilter< TImage, TImage>
{
public:
  /** Standard typenames typedefs. */
  typedef WaveletDenoiseBLSGSM                 Self;
  typedef ImageToImageFilter< TImage, TImage > Superclass;
  typedef SmartPointer< Self >                 Pointer;
  typedef SmartPointer< const Self >           ConstPointer;

  /** Inherit types from Superclass. */
  typedef typename Superclass::InputImageType         InputImageType;
  typedef typename Superclass::OutputImageType        OutputImageType;
  typedef typename Superclass::InputImagePointer      InputImagePointer;
  typedef typename Superclass::OutputImagePointer     OutputImagePointer;
  typedef typename Superclass::InputImageConstPointer InputImageConstPointer;

  typedef typename std::vector<InputImagePointer> InputsType;
  typedef typename std::vector<OutputImagePointer> OutputsType;

  // typedef typename itk::ImageRegionIterator<OutputImageType>     OutputRegionIterator;
  // typedef typename itk::ImageRegionConstIterator<InputImageType> InputRegionConstIterator;
  // typedef typename OutputImageType::RegionType                   OutputImageRegionType;

  /** ImageDimension constants */
  itkStaticConstMacro(ImageDimension, unsigned int,
                      TImage::ImageDimension);

  /** Standard New method. */
  itkNewMacro(Self);

  /** Runtime information support. */
  itkTypeMacro(WaveletDenoiseBLSGSM,
               ImageToImageFilter);

  virtual void SetLevels(unsigned int n);
  itkGetConstReferenceMacro(Levels, unsigned int);

  virtual void SetHighPassSubBands(unsigned int n);
  itkGetConstReferenceMacro(HighPassSubBands, unsigned int);

  itkGetConstReferenceMacro(TotalOutputs, unsigned int);

  /** ScaleFactor for each level in the pyramid.
   * Set to 2 (dyadic) at constructor and not modifiable, but provides future flexibility */
  itkGetConstReferenceMacro(ScaleFactor, unsigned int);
  // itkSetMacro(ScaleFactor, unsigned int);

  /** (Level, band) pair.
   * Level from: [0, m_Levels), and equal to m_Levels only for the low_pass image.
   * band from [0, m_HighPassSubbands) */
  typedef std::pair<unsigned int, unsigned int> IndexPairType;
  /** Get the (Level,Band) from a linear index output.
   * The index corresponding to the low-pass image is the last one, corresponding to the IndexPairType(this->GetLevels(), 0).
   */
  IndexPairType OutputIndexToLevelBand(unsigned int linear_index);

  /** Set vector of inputs */
  void SetInputs(const InputsType & inputs);
  /** Retrieve outputs */
  OutputsType GetOutputs();

protected:
  WaveletDenoiseBLSGSM();
  ~WaveletDenoiseBLSGSM() {}
  void PrintSelf(std::ostream & os, Indent indent) const ITK_OVERRIDE;

  /** Single-threaded version of GenerateData. */
  void GenerateData() ITK_OVERRIDE;

  /************ Information *************/

  /** WaveletDenoiseBLSGSM produces images which are of
   * different resolution and different pixel spacing than its input image.
   * As such, WaveletDenoiseBLSGSM needs to provide an
   * implementation for GenerateOutputInformation() in order to inform the
   * pipeline execution model.  The original documentation of this method is
   * below.
   * \sa ProcessObject::GenerateOutputInformaton()
   */
  virtual void GenerateOutputInformation() ITK_OVERRIDE;

  /** Given one output whose requested region has been set, this method sets
   * the requested region for the remaining output images.  The original
   * documentation of this method is below.
   * \sa ProcessObject::GenerateOutputRequestedRegion()
   */
  virtual void GenerateOutputRequestedRegion(DataObject *output) ITK_OVERRIDE;

  /** WaveletDenoiseBLSGSM requires a larger input requested
   * region than the output requested regions to accommodate the shrinkage and
   * smoothing operations. As such, WaveletDenoiseBLSGSM needs
   * to provide an implementation for GenerateInputRequestedRegion().  The
   * original documentation of this method is below.
   * \sa ProcessObject::GenerateInputRequestedRegion()
   */
  virtual void GenerateInputRequestedRegion() ITK_OVERRIDE;

private:
  ITK_DISALLOW_COPY_AND_ASSIGN(WaveletDenoiseBLSGSM);

  unsigned int                    m_Levels;
  unsigned int                    m_HighPassSubBands;
  unsigned int                    m_TotalOutputs;
  unsigned int                    m_ScaleFactor;
};
} // end namespace itk
#ifndef ITK_MANUAL_INSTANTIATION
#include "itkWaveletDenoiseBLSGSM.hxx"
#endif

#endif
